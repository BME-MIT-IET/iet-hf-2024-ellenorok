import model.*;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

public class GraphicsDesigner extends JFrame implements ActionListener {
    private Game game;
    protected List<Pipe> edges = new ArrayList<Pipe>();

    private CardLayout cardLayout;
    private JPanel cardPanel;
    private JPanel menuCard;
    private JButton bQuit;
    private JButton bPlay;
    private JPanel gameCard;
    private JLabel lWelcome;
    private JPanel pMap;
    private JPanel pInformation;
    private JPanel pButtons;
    private JLabel lMechText;
    private JLabel lSabText;
    private JLabel lActionText;
    private JLabel lMechPoints;
    private JLabel lSabPoints;
    private JLabel lActionPoints;
    private JButton bMovePipe;
    private JButton bMove;
    private JButton bMakeSlipperry;
    private JButton bMakeSticky;
    private JButton bBreak;
    private JButton bRepair;
    private JButton bPlace;
    private JButton bPickup;
    private JButton bChangePumpDirection;
    private JButton bEndGame;
    private JButton bEndTurn;

    public GraphicsDesigner() {
        super("Game");
        this.setSize(1200, 600);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        this.setContentPane(cardPanel);
        this.setVisible(true);
        cardLayout = new CardLayout();
        cardPanel.setLayout(cardLayout);


        //setting action commands for buttons and give this class to it as actionListener
        bPlay.setActionCommand("play");
        bPlay.addActionListener(this);
    }

    private void drawNodes() {
    }

    private void drawEdges() {
    }

    //missing methods for logic of pulling and clicking

    public void movePipe() {
    }

    public void endGame() {
    }

    public void makeSlippery() {
    }

    public void makeSticky() {
    }

    public void breakField() {
    }

    public void repairField() {
    }

    public void place() {
    }

    public void pickup() {
    }

    public void changePumpDirection() {
    }

    public void endTurn() {
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case "play" -> {
                cardLayout.next(cardPanel);
            }
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        cardPanel = new JPanel();
        cardPanel.setLayout(new CardLayout(0, 0));
        menuCard = new JPanel();
        menuCard.setLayout(new GridBagLayout());
        cardPanel.add(menuCard, "menu");
        bQuit = new JButton();
        bQuit.setText("Quit");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipady = 50;
        menuCard.add(bQuit, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        menuCard.add(spacer1, gbc);
        bPlay = new JButton();
        bPlay.setText("Play");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipady = 50;
        menuCard.add(bPlay, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        menuCard.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        menuCard.add(spacer3, gbc);
        lWelcome = new JLabel();
        lWelcome.setBackground(new Color(-16777216));
        lWelcome.setEnabled(true);
        Font lWelcomeFont = this.$$$getFont$$$("Arial", Font.PLAIN, 48, lWelcome.getFont());
        if (lWelcomeFont != null) lWelcome.setFont(lWelcomeFont);
        lWelcome.setForeground(new Color(-16777216));
        lWelcome.setHorizontalAlignment(0);
        lWelcome.setHorizontalTextPosition(0);
        lWelcome.setText("Welcome");
        lWelcome.setVerticalAlignment(0);
        lWelcome.setVerticalTextPosition(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridwidth = 3;
        gbc.gridheight = 2;
        gbc.ipadx = 200;
        gbc.ipady = 50;
        menuCard.add(lWelcome, gbc);
        gameCard = new JPanel();
        gameCard.setLayout(new GridBagLayout());
        cardPanel.add(gameCard, "game");
        pInformation = new JPanel();
        pInformation.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.NORTHWEST;
        gameCard.add(pInformation, gbc);
        lMechText = new JLabel();
        lMechText.setHorizontalAlignment(2);
        lMechText.setText("Mechanic Points: ");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.NORTHWEST;
        gbc.ipadx = 50;
        gbc.ipady = 30;
        gbc.insets = new Insets(30, 0, 0, 0);
        pInformation.add(lMechText, gbc);
        lSabText = new JLabel();
        lSabText.setHorizontalAlignment(2);
        lSabText.setText("Saboteur Points: ");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipadx = 50;
        gbc.ipady = 30;
        pInformation.add(lSabText, gbc);
        lActionText = new JLabel();
        lActionText.setHorizontalAlignment(2);
        lActionText.setText("Action Points Left In Round: ");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipadx = 50;
        gbc.ipady = 30;
        pInformation.add(lActionText, gbc);
        lMechPoints = new JLabel();
        lMechPoints.setText("3");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.weightx = 50.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipadx = 50;
        gbc.ipady = 30;
        gbc.insets = new Insets(10, 0, 0, 0);
        pInformation.add(lMechPoints, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        pInformation.add(spacer4, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        pInformation.add(spacer5, gbc);
        lSabPoints = new JLabel();
        lSabPoints.setText("2");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipadx = 50;
        gbc.ipady = 30;
        pInformation.add(lSabPoints, gbc);
        lActionPoints = new JLabel();
        lActionPoints.setText("1");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipadx = 50;
        gbc.ipady = 30;
        pInformation.add(lActionPoints, gbc);
        pButtons = new JPanel();
        pButtons.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 3.0;
        gbc.fill = GridBagConstraints.BOTH;
        gameCard.add(pButtons, gbc);
        bMovePipe = new JButton();
        bMovePipe.setHorizontalTextPosition(0);
        bMovePipe.setText("<html>Move<br>Pipe</html>");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        pButtons.add(bMovePipe, gbc);
        bBreak = new JButton();
        bBreak.setText("Break");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        pButtons.add(bBreak, gbc);
        bChangePumpDirection = new JButton();
        bChangePumpDirection.setHorizontalTextPosition(0);
        bChangePumpDirection.setText("<html>Change<br>Pump<br>Direction</html>");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 3.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        pButtons.add(bChangePumpDirection, gbc);
        bMakeSlipperry = new JButton();
        bMakeSlipperry.setHorizontalTextPosition(0);
        bMakeSlipperry.setText("<html>Make<br>Slippery</html>");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 2.0;
        gbc.fill = GridBagConstraints.BOTH;
        pButtons.add(bMakeSlipperry, gbc);
        bMakeSticky = new JButton();
        bMakeSticky.setHorizontalTextPosition(0);
        bMakeSticky.setText("<html>Make<br>Sticky</html>");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.weightx = 2.0;
        gbc.fill = GridBagConstraints.BOTH;
        pButtons.add(bMakeSticky, gbc);
        bMove = new JButton();
        bMove.setText("Move");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.ipady = 50;
        pButtons.add(bMove, gbc);
        bRepair = new JButton();
        bRepair.setText("Repair");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.ipady = 50;
        pButtons.add(bRepair, gbc);
        bPlace = new JButton();
        bPlace.setText("Place");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        pButtons.add(bPlace, gbc);
        bPickup = new JButton();
        bPickup.setText("Pickup");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        pButtons.add(bPickup, gbc);
        bEndGame = new JButton();
        bEndGame.setHorizontalTextPosition(0);
        bEndGame.setText("<html>End<br>Game</html>");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        pButtons.add(bEndGame, gbc);
        bEndTurn = new JButton();
        bEndTurn.setHorizontalTextPosition(0);
        bEndTurn.setText("<html>End<br>Turn</html>");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        pButtons.add(bEndTurn, gbc);
        pMap = new JPanel();
        pMap.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.weightx = 10.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gameCard.add(pMap, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return cardPanel;
    }

}
