@startuml new_class_diagram

' Mechanic -[dashed]-> Pump

' Pipe -[dashed]-|> Stateful
class Field <<abstract>> {
    #List<Field> neighbors
    #List<Player> players
    +bool accept(Player p)
    +void addPlayer(Player p)
    +void removePlayer(Player p)
    +void changePumpDirection(Pipe in, Pipe out)
    +void addNeighbor(Field f)
    +void removeNeighbor(Field f)
    +bool placePump(Mechanic m)
    +bool pickupPump(Mechanic m)
    +void repair()
    +void break()
    +void makeSlippery()
    +void makeSticky()
    +void isSticky()
}
Field o-- "-neigbors 0..*" Field

class Pipe extends Field {
    -bool oldWaterState
    -bool newWaterState
    -bool isBroken
    -int breakProofCounter
    -int slipperyCounter
    -int stickyCounter
    +void accept(Player p)
    +void step()
    +void changeState()
    +void repair()
    +void break()
    +bool placePump(Mechanic m)
    +void flowWater(Cistern c)
    +void giveWater(Pump p)
    +void makeSticky()
    +void makeSlippery()
    +void isSticky()
}
' Pipe -[dashed]|> Periodic
' Pipe -[dashed]-> Pump

class Game <<static>> {
    -List<Field> fields
    -List<Player> players
    -Player activePlayer
    -int saboteurPoints
    -int mechanicPoints
    -int actionNumber
    +void play()
    +void end()
    +void endTurn()
    +void breakField()
    +void repairField()
    +void place()
    +void pickup()
    +void actionTaken()
    +void addMechanicPoints()
    +void addSaboteurPoints()
    +void changePumpDirection(Pipe in, Pipe out)
    +void movePipe(Pipe p, Field oldEnd, Field newEnd)
    +void makeSlippery()
    +void makeSticky()
    +bool mechanicWin()
    +bool saboteurWin()
}

class Graphics {
    -List<Node> nodes
    -List<Pipe> edges
    -int movePipeIC
    -int moveIC
    -int changePumpDirectionIC
    -void pull()
    -void drawNodes()
    -void drawEdges()
    +void onMouseDown(int x, int y)
    +void onGameEnded()
    +void movePipe()
    +void endGame()
    +void makeSlippery()
    +void makeSticky()
    +void breakField()
    +void repairField()
    +void place()
    +void pickup()
    +void changePumpDirection()
    +void endTurn()
    +void move()
    +Node getNodeFromClick(int x, int y)
    +Pipe getPipeFromClick(int x, int y)
}

Graphics --"game" Game

Enum Shape {
    +rectangle
    +triangle
}

class PlayerIcon{
    -Color color
    -Shape shape
    +bool fill
    +void draw(int x, int y)
}

PlayerIcon -[dashed]-> Shape

class Node <<abstract>>{
    -int x
    -int y
    -JComponent component
    +void draw()
    +boolean on(int x, int y)
    +getGameReference(): Field
}

class SourceNode extends Node{
    -Source s
    +void draw()
    +boolean on(int x, int y)
    +getGameReference(): Source
}

class CisternNode extends Node{
    -Cistern c
    +void draw()
    +boolean on(int x, int y)
    +getGameReference(): Cistern
}

class PumpNode extends Node{
    -Pump p
    +void draw()
    +boolean on(int x, int y)
    +getGameReference(): Pump
}
Graphics *-- "-nodes 0..*" Node
Graphics *-- "-edges 0..*" Pipe
Node *-- "-players 0..*" PlayerIcon
Game *-- "-fields 0..*" Field

' Game -[dashed]-> Pipe
' Game -[dashed]-> Timer

' remove Game
' remove Periodic
' remove Timer
' remove Player
' remove Saboteur
' remove Mechanic
' remove Field
' remove Cistern
' remove Pump
' remove Pipe
' remove Source
' remove Stateful

' Code cemetery below :-/
' Game "-game 1" --- "-graphics 1" Graphics

' enum Button {
'     +MoveButton
'     +BreakButton
'     +RepairButton
'     +PickupButton
'     +PlaceButton
'     +EndTurnButton
'     +ChangePumpDirection
' }
' class Graphics <<static>> {
'     -Game game
'     +void renderMap()
'     +void buttonPushed(Button b)
' }

@enduml



