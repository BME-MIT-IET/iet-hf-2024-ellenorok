@startuml 
title 1. Button Move
actor Actor
participant Graphics

Actor -> Graphics: buttonMove(): void
    activate Graphics
    note right of Graphics
        Graphics sets moveIC to 1
    end note
return
@enduml

@startuml
title 2. Button Break
actor Actor
participant Graphics
participant Game

Actor -> Graphics: breakField(): void
    activate Graphics
    Graphics -> Game: breakField(): void
    activate Game
    return 
Graphics -> Graphics: pull(): void
    activate Graphics
    return 
return 
@enduml

@startuml
autoactivate on
title 3. Pull method
participant Graphics
participant Game
participant Node
participant nodes

Graphics -> Graphics: pull(): void
    Graphics -> Game: getPlayers(): List<Player>
    return players 
    Graphics -> Game: isGameLive(): bool
    return isLive 
    Graphics -> Game: getSaboteurPoints(): int
    return sabPoints 
    Graphics -> Game: getMechanicPoints(): int
    return mechPoints 
    Graphics -> Game: getActionNumber(): int
    return actionNumber 

    Graphics -> Game: getPumps(): List<Pump>
    return pumps 

    loop for all p: Pump in pumps
    create PumpNode
    Graphics -> PumpNode: new()
    Graphics -> nodes: add(PumpNode)
    return
    end

    Graphics -> Game: getCisterns(): List<Cistern>
    return cisterns

    loop for all c: Cistern in cisterns
    create CisternNode
    Graphics -> CisternNode: new()
    Graphics -> nodes: add(CisternNode)
    return
    end

    Graphics -> Game: getSources(): List<Source>
    return sources 

    loop for all s: Source in sources
    create SourceNode
    Graphics -> SourceNode: new()
    Graphics -> nodes: add(SourceNode)
    return
    end

    Graphics -> Game: getPipes(): List<Pipe>
    return edges 

    Graphics -> Graphics: drawNodes(): void
        loop for all n: Node in nodes
        Graphics -> Node: draw(): void
        return
        end 
    return

    Graphics -> Graphics: drawEdges(): void
    return

return 
@enduml

@startuml
title 4. Button Repair
actor Actor
participant Graphics
participant Game

Actor -> Graphics: repairField(): void
    activate Graphics
    Graphics -> Game: repairField(): void
    activate Game
    return 
Graphics -> Graphics: pull(): void
    activate Graphics
    return 
return 
@enduml


@startuml
title 5. Button Place
actor Actor
participant Graphics
participant Game

Actor -> Graphics: place(): void
    activate Graphics
    Graphics -> Game: place(): void
    activate Game
    return 
Graphics -> Graphics: pull(): void
    activate Graphics
    return 
return 
@enduml


@startuml
title 6. Button Pickup
actor Actor
participant Graphics
participant Game

Actor -> Graphics: pickup(): void
    activate Graphics
    Graphics -> Game: pickup(): void
    activate Game
    return 
Graphics -> Graphics: pull(): void
    activate Graphics
    return 
return 
@enduml


@startuml
title 7. Button EndTurn
actor Actor
participant Graphics
participant Game

Actor -> Graphics: endTurn(): void
    activate Graphics
    Graphics -> Game: endTurn(): void
    activate Game
    return 
Graphics -> Graphics: pull(): void
    activate Graphics
    return 
Graphics -> Game: mechanicWin(): bool
    activate Game
    return mechWin 
Graphics -> Game: saboteurWin(): bool
    activate Game
    return sabWin 

opt one of the teams win
note over Game 
MessageBox pops up
end note
Graphics -> Graphics: endGame(): void
    activate Graphics
    Graphics -> Game: end(): void
        activate Game
        return 
    return 
end
return 
@enduml


@startuml
title 8. Button MakeSticky
actor Actor
participant Graphics
participant Game

Actor -> Graphics: makeSticky(): void
    activate Graphics
    Graphics -> Game: makeSticky(): void
    activate Game
    return 
Graphics -> Graphics: pull(): void
    activate Graphics
    return 
return 
@enduml


@startuml
title 9. Button MakeSlippery
actor Actor
participant Graphics
participant Game

Actor -> Graphics: makeSlippery(): void
    activate Graphics
    Graphics -> Game: makeSlippery(): void
    activate Game
    return 
Graphics -> Graphics: pull(): void
    activate Graphics
    return 
return 
@enduml

@startuml
title 10. Button MovePipe
actor Actor
participant Graphics
Actor -> Graphics: movePipe(): void
    activate Graphics
    note right of Graphics
        Graphics sets 
        movePipeIC to 1
    end note
return


@enduml
@startuml
title 11. Button ChangePumpDirection
actor Actor
participant Graphics
Actor -> Graphics: changePumpDirection(): void
    activate Graphics
    note right of Graphics
        Graphics sets 
        changePumpDirectionIC to 1
    end note
return
@enduml

@startuml
title 12. Button EndGame
actor Actor
participant Graphics
participant Game

Actor -> Graphics: endGame(): void
    activate Graphics
    Graphics -> Game: end(): void
    activate Game
    return 

return 
@enduml

@startuml
title 13. Button Play
actor Actor
participant Graphics
participant Game

Actor -> Graphics: play(): void 
    activate Graphics
    Graphics -> Game: play(): void
        activate Game 
        return 
Graphics -> Graphics: pull(): void
    activate Graphics
    return 
return 
@enduml

@startuml
title 14. Button Quit
actor Actor
participant Graphics

Actor -> Graphics: quit(): void 
activate Graphics
return 
@enduml

@enduml
'TODO
@startuml 15. Get Node From Click
title 15. Get Node From Click
actor Actor
participant Graphics
participant Node1 [
    Node
    ----
    n
]

Actor -> Graphics: getNodeFromClick(x, y): Node
    activate Graphics
    note right of Graphics
        new variable: found = null
    end note
    loop for all n in nodes
        Graphics -> Node1: on(x, y): boolean
            activate Node1
        return onCurrent

        opt onCurrent == true
            note right of Graphics
                found = n
                break loop
            end note
        end
    end
return found
@enduml

@startuml 16. Get Pipe From Click
title 16. Get Pipe From Click
actor Actor
participant Graphics
participant Pipe [
    Pipe
    ----
    p
]
participant Node [
    Node
    ----
    n
]
Actor -> Graphics: getPipeFromClick(x, y)
    activate Graphics
    note right of Graphics
        new variable: found = null
    end note
    loop all p in edges
        note right of Graphics
        new variable n1Node = null
        new variable n2Node = null
        end note
        Graphics -> Pipe: getNeighbors(): List<Field>
            activate Pipe
        return [n1, n2]
        loop for all n in nodes
            Graphics -> Node: getGameReference(): Field
                activate Node
            return ref
            opt ref == n1
                note right of Graphics
                    n1Node = ref
                    break loop
                end note
            end
        end
        loop for all n in nodes
            Graphics -> Node: getGameReference(): Field
                activate Node
            return ref
            opt ref == n2
                note right of Graphics
                    n2Node = ref
                    break loop
                end note
            end
        end
        note right of Graphics
            Check if (x,y) lies on line
            between n1Node and n2Node
            If yes: found = p
            break loop
        end note
    end
return found

@enduml

@startuml 17. Mouse clicked - Abstract
title 17. Mouse clicked - Abstract
actor Actor
participant Graphics
Actor -> Graphics: onMouseDown(x, y): void
    activate Graphics
    note right of Graphics
        Behaviour segment on diagram
        17. Mouse clicked - Move Player
    end note
    note right of Graphics
        Behaviour segment on diagram
        17. Mouse clicked - Change Pump Direction
    end note
    note right of Graphics
        Behaviour segment on diagram
        17. Mouse clicked - Move Pipe
    end note
return
@enduml

@startuml 17. Mouse clicked - Move Player
title 17. Mouse clicked - Move Player
actor Actor
participant Graphics
participant Node1 [
    Node
    ----
    n1
]
participant Pipe3 [
    Pipe
    ----
    p3
]
participant Game
participant Player [
    Player
    ----
    p
]
Actor -> Graphics: onMouseDown(x, y): void
    activate Graphics
    Graphics -> Graphics: getNodeFromClick(x, y)
        activate Graphics
    return n1
    opt n1 != null && moveIC > 0
        Graphics -> Game: getActivePlayer(): Player
            activate Game
        return p
        Graphics -> Node1: getGameReference(): Field
            activate Node1
        return f
        Graphics -> Player: moveToField(Field f): void
            activate Player
        return 
        note right of Graphics
            set moveIC to 0
        end note
    end
return
@enduml

@startuml 17. Mouse clicked - Change Pump Direction
title 17. Mouse clicked - Change Pump Direction
actor Actor
participant Graphics
participant Game
Actor -> Graphics: onMouseDown(x, y): void
    activate Graphics
    alt changePumpDirectionIC == 1
            Graphics -> Graphics: getPipeFromClick(x, y): Pipe
                activate Graphics
            return p1
            opt p1 != null
                note right of Graphics
                    save reference to p1
                    set changePumpDirectionIC to 2
                end note
            end
    else changePumpDirectionIC == 2
            Graphics -> Graphics: getPipeFromClick(x, y): Pipe
                activate Graphics
            return p2
            opt p2 != null
                Graphics -> Game: changePumpDirection(p1, p2): void
                    activate Game
                return
                note right of Graphics
                   set changePumpDirectionIC to 0
                end note
            end
    end
return
@enduml

@startuml 17. Mouse clicked - Move Pipe
title 17. Mouse clicked - Move Pipe
actor Actor
participant Graphics
participant Node2 [
    Node
    ----
    n2
]
participant Node3 [
    Node
    ----
    n3
]
participant Game
Actor -> Graphics: onMouseDown(x, y): void
    activate Graphics
    alt movePipeIC == 1
            Graphics -> Graphics: getPipeFromClick(x, y): Pipe
                activate Graphics
            return p3
            opt p3 != null
                note right of Graphics
                    save reference to p3
                    set movePipeIC to 2
                end note
            end
    else movePipeIC == 2
            Graphics -> Graphics: getNodeFromClick(x, y): Node
                activate Graphics
            return n2
            opt n2 != null
                Graphics -> Node2: getGameReference(): Field
                    activate Node2
                return f2
                note right of Graphics
                    save reference to f2
                    set movePipeIC to 3
                end note
            end
    else movePipeIC == 3
            Graphics -> Graphics: getNodeFromClick(x, y): Node
                activate Graphics
            return n3
            note right of Graphics: new variable: f3 = null
            opt n3 != null
                Graphics -> Node3: getGameReference(): Field
                    activate Node3
                return field
                note right of Graphics: f3 = field
            end

            note right of Graphics: f3 can be null here (important behaviour)
            
            Graphics -> Game: movePipe(p3, f2, f3)
                activate Game
            return

            note right of Graphics: set movePipeIC to 0
    end
return
@enduml